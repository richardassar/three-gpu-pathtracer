{"mappings":"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","sources":["src/index.js","src/core/PathTracingRenderer.js","src/materials/BlendMaterial.js","src/core/DynamicPathTracingSceneGenerator.js","src/core/MaterialReducer.js","src/core/PhysicalCamera.js","src/utils/BlurredEnvMapGenerator.js","src/materials/PhysicalPathTracingMaterial.js","src/uniforms/MaterialsTexture.js","src/uniforms/RenderTarget2DArray.js","src/shader/shaderMaterialSampling.js","src/shader/shaderGGXFunctions.js","src/shader/shaderEnvMapSampling.js","src/uniforms/PhysicalCameraUniform.js","src/uniforms/EquirectHdrInfoUniform.js","node_modules/three/examples/jsm/loaders/RGBELoader.js"],"sourcesContent":["// core\nexport * from './core/PathTracingRenderer.js';\nexport * from './core/PathTracingSceneGenerator.js';\nexport * from './core/DynamicPathTracingSceneGenerator.js';\nexport * from './core/MaterialReducer.js';\nexport * from './core/PhysicalCamera.js';\n\n// uniforms\nexport * from './uniforms/MaterialsTexture.js';\nexport * from './uniforms/RenderTarget2DArray.js';\nexport * from './uniforms/EquirectHdrInfoUniform.js';\nexport * from './uniforms/PhysicalCameraUniform.js';\n\n// utils\nexport * from './utils/GeometryPreparationUtils.js';\nexport * from './utils/BlurredEnvMapGenerator.js';\n\n// materials\nexport * from './materials/MaterialBase.js';\nexport * from './materials/PhysicalPathTracingMaterial.js';\n\n// shaders\nexport * from './shader/shaderMaterialSampling.js';\nexport * from './shader/shaderUtils.js';\nexport * from './shader/shaderStructs.js';\n","import { RGBAFormat, FloatType, Color, Vector2, WebGLRenderTarget, NoBlending, NormalBlending } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { BlendMaterial } from '../materials/BlendMaterial.js';\n\nfunction* renderTask() {\n\n\tconst {\n\t\t_renderer,\n\t\t_fsQuad,\n\t\t_blendQuad,\n\t\t_primaryTarget,\n\t\t_blendTargets,\n\t\talpha,\n\t\tcamera,\n\t\tmaterial,\n\t} = this;\n\n\tconst blendMaterial = _blendQuad.material;\n\tlet [ blendTarget1, blendTarget2 ] = _blendTargets;\n\n\twhile ( true ) {\n\n\t\tif ( alpha ) {\n\n\t\t\tblendMaterial.opacity = 1 / ( this.samples + 1 );\n\t\t\tmaterial.blending = NoBlending;\n\t\t\tmaterial.opacity = 1;\n\n\t\t} else {\n\n\t\t\tmaterial.opacity = 1 / ( this.samples + 1 );\n\t\t\tmaterial.blending = NormalBlending;\n\n\t\t}\n\n\t\tconst w = _primaryTarget.width;\n\t\tconst h = _primaryTarget.height;\n\t\tmaterial.resolution.set( w, h );\n\t\tmaterial.seed ++;\n\n\t\tconst tx = this.tiles.x || 1;\n\t\tconst ty = this.tiles.y || 1;\n\t\tconst totalTiles = tx * ty;\n\t\tconst dprInv = ( 1 / _renderer.getPixelRatio() );\n\t\tfor ( let y = 0; y < ty; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < tx; x ++ ) {\n\n\t\t\t\tmaterial.cameraWorldMatrix.copy( camera.matrixWorld );\n\t\t\t\tmaterial.invProjectionMatrix.copy( camera.projectionMatrixInverse );\n\t\t\t\t// An orthographic projection matrix will always have the bottom right element == 1\n\t\t\t\t// And a perspective projection matrix will always have the bottom right element == 0\n\t\t\t\tmaterial.isOrthographicCamera = camera.projectionMatrix.elements[ 15 ] > 0;\n\n\t\t\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\t\t\tconst ogAutoClear = _renderer.autoClear;\n\n\t\t\t\t// three.js renderer takes values relative to the current pixel ratio\n\t\t\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t\t\t_renderer.setScissorTest( true );\n\t\t\t\t_renderer.setScissor(\n\t\t\t\t\tdprInv * Math.ceil( x * w / tx ),\n\t\t\t\t\tdprInv * Math.ceil( ( ty - y - 1 ) * h / ty ),\n\t\t\t\t\tdprInv * Math.ceil( w / tx ),\n\t\t\t\t\tdprInv * Math.ceil( h / ty ) );\n\t\t\t\t_renderer.autoClear = false;\n\t\t\t\t_fsQuad.render( _renderer );\n\n\t\t\t\t_renderer.setScissorTest( false );\n\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\t\t\t\t_renderer.autoClear = ogAutoClear;\n\n\t\t\t\tif ( alpha ) {\n\n\t\t\t\t\tblendMaterial.target1 = blendTarget1.texture;\n\t\t\t\t\tblendMaterial.target2 = _primaryTarget.texture;\n\n\t\t\t\t\t_renderer.setRenderTarget( blendTarget2 );\n\t\t\t\t\t_blendQuad.render( _renderer );\n\t\t\t\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tthis.samples += ( 1 / totalTiles );\n\n\t\t\t\tyield;\n\n\t\t\t}\n\n\t\t}\n\n\t\t[ blendTarget1, blendTarget2 ] = [ blendTarget2, blendTarget1 ];\n\n\t\tthis.samples = Math.round( this.samples );\n\n\t}\n\n}\n\nconst ogClearColor = new Color();\nexport class PathTracingRenderer {\n\n\tget material() {\n\n\t\treturn this._fsQuad.material;\n\n\t}\n\n\tset material( v ) {\n\n\t\tthis._fsQuad.material = v;\n\n\t}\n\n\tget target() {\n\n\t\treturn this._alpha ? this._blendTargets[ 1 ] : this._primaryTarget;\n\n\t}\n\n\tset alpha( v ) {\n\n\t\tif ( ! v ) {\n\n\t\t\tthis._blendTargets[ 0 ].dispose();\n\t\t\tthis._blendTargets[ 1 ].dispose();\n\n\t\t}\n\n\t\tthis._alpha = v;\n\t\tthis.reset();\n\n\t}\n\n\tget alpha() {\n\n\t\treturn this._alpha;\n\n\t}\n\n\tconstructor( renderer ) {\n\n\t\tthis.camera = null;\n\t\tthis.tiles = new Vector2( 1, 1 );\n\n\t\tthis.samples = 0;\n\t\tthis.stableNoise = false;\n\t\tthis._renderer = renderer;\n\t\tthis._alpha = false;\n\t\tthis._fsQuad = new FullScreenQuad( null );\n\t\tthis._blendQuad = new FullScreenQuad( new BlendMaterial() );\n\t\tthis._task = null;\n\n\t\tthis._primaryTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: FloatType,\n\t\t} );\n\t\tthis._blendTargets = [\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t\tnew WebGLRenderTarget( 1, 1, {\n\t\t\t\tformat: RGBAFormat,\n\t\t\t\ttype: FloatType,\n\t\t\t} ),\n\t\t];\n\n\t}\n\n\tsetSize( w, h ) {\n\n\t\tthis._primaryTarget.setSize( w, h );\n\t\tthis._blendTargets[ 0 ].setSize( w, h );\n\t\tthis._blendTargets[ 1 ].setSize( w, h );\n\t\tthis.reset();\n\n\t}\n\n\tdispose() {\n\n\t\tthis._primaryTarget.dispose();\n\t\tthis._blendTargets[ 0 ].dispose();\n\t\tthis._blendTargets[ 1 ].dispose();\n\n\t\tthis._fsQuad.dispose();\n\t\tthis._blendQuad.dispose();\n\t\tthis._task = null;\n\n\t}\n\n\treset() {\n\n\t\tconst { _renderer, _primaryTarget, _blendTargets } = this;\n\t\tconst ogRenderTarget = _renderer.getRenderTarget();\n\t\tconst ogClearAlpha = _renderer.getClearAlpha();\n\t\t_renderer.getClearColor( ogClearColor );\n\n\t\t_renderer.setRenderTarget( _primaryTarget );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 0 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setRenderTarget( _blendTargets[ 1 ] );\n\t\t_renderer.setClearColor( 0, 0 );\n\t\t_renderer.clearColor();\n\n\t\t_renderer.setClearColor( ogClearColor, ogClearAlpha );\n\t\t_renderer.setRenderTarget( ogRenderTarget );\n\n\t\tthis.samples = 0;\n\t\tthis._task = null;\n\n\t\tif ( this.stableNoise ) {\n\n\t\t\tthis.material.seed = 0;\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tif ( ! this._task ) {\n\n\t\t\tthis._task = renderTask.call( this );\n\n\t\t}\n\n\t\tthis._task.next();\n\n\t}\n\n}\n","import { NoBlending } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\n\nexport class BlendMaterial extends MaterialBase {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\tblending: NoBlending,\n\n\t\t\tuniforms: {\n\n\t\t\t\ttarget1: { value: null },\n\t\t\t\ttarget2: { value: null },\n\t\t\t\topacity: { value: 1.0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform float opacity;\n\n\t\t\t\tuniform sampler2D target1;\n\t\t\t\tuniform sampler2D target2;\n\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 color1 = texture2D( target1, vUv );\n\t\t\t\t\tvec4 color2 = texture2D( target2, vUv );\n\n\t\t\t\t\tfloat invOpacity = 1.0 - opacity;\n\t\t\t\t\tfloat totalAlpha = color1.a * invOpacity + color2.a * opacity;\n\n\t\t\t\t\tif ( color1.a != 0.0 || color2.a != 0.0 ) {\n\n\t\t\t\t\t\tgl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );\n\t\t\t\t\t\tgl_FragColor.a = totalAlpha;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { BufferGeometry } from 'three';\nimport { StaticGeometryGenerator, MeshBVH } from 'three-mesh-bvh';\nimport { setCommonAttributes, getGroupMaterialIndicesAttribute } from '../utils/GeometryPreparationUtils.js';\n\nexport class DynamicPathTracingSceneGenerator {\n\n\tget initialized() {\n\n\t\treturn Boolean( this.bvh );\n\n\t}\n\n\tconstructor( scene ) {\n\n\t\tthis.scene = scene;\n\t\tthis.bvh = null;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( scene );\n\n\t}\n\n\treset() {\n\n\t\tthis.bvh = null;\n\t\tthis.geometry.dispose();\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.materials = null;\n\t\tthis.textures = null;\n\t\tthis.staticGeometryGenerator = new StaticGeometryGenerator( this.scene );\n\n\t}\n\n\tdispose() {}\n\n\tgenerate() {\n\n\t\tconst { scene, staticGeometryGenerator, geometry } = this;\n\t\tif ( this.bvh === null ) {\n\n\t\t\tconst attributes = [ 'position', 'normal', 'tangent', 'uv' ];\n\t\t\tscene.traverse( c => {\n\n\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\tconst normalMapRequired = ! ! c.material.normalMap;\n\t\t\t\t\tsetCommonAttributes( c.geometry, { attributes, normalMapRequired } );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst textureSet = new Set();\n\t\t\tconst materials = staticGeometryGenerator.getMaterials();\n\t\t\tmaterials.forEach( material => {\n\n\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\t\t\ttextureSet.add( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tstaticGeometryGenerator.attributes = attributes;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\n\t\t\tconst materialIndexAttribute = getGroupMaterialIndicesAttribute( geometry, materials, materials );\n\t\t\tgeometry.setAttribute( 'materialIndex', materialIndexAttribute );\n\t\t\tgeometry.clearGroups();\n\n\t\t\tthis.bvh = new MeshBVH( geometry );\n\t\t\tthis.materials = materials;\n\t\t\tthis.textures = Array.from( textureSet );\n\n\t\t\treturn {\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tscene,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconst { bvh } = this;\n\t\t\tstaticGeometryGenerator.generate( geometry );\n\t\t\tbvh.refit();\n\t\t\treturn {\n\t\t\t\tbvh: this.bvh,\n\t\t\t\tmaterials: this.materials,\n\t\t\t\ttextures: this.textures,\n\t\t\t\tscene,\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\n}\n","// https://github.com/gkjohnson/webxr-sandbox/blob/main/skinned-mesh-batching/src/MaterialReducer.js\n\nfunction isTypedArray( arr ) {\n\n\treturn arr.buffer instanceof ArrayBuffer && 'BYTES_PER_ELEMENT' in arr;\n\n}\n\nexport class MaterialReducer {\n\n\tconstructor() {\n\n\t\tconst ignoreKeys = new Set();\n\t\tignoreKeys.add( 'uuid' );\n\n\t\tthis.ignoreKeys = ignoreKeys;\n\t\tthis.shareTextures = true;\n\t\tthis.textures = [];\n\t\tthis.materials = [];\n\n\t}\n\n\tareEqual( objectA, objectB ) {\n\n\t\tconst keySet = new Set();\n\t\tconst traverseSet = new Set();\n\t\tconst ignoreKeys = this.ignoreKeys;\n\n\t\tconst traverse = ( a, b ) => {\n\n\t\t\tif ( a === b ) {\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\tif ( a && b && a instanceof Object && b instanceof Object ) {\n\n\t\t\t\tif ( traverseSet.has( a ) || traverseSet.has( b ) ) {\n\n\t\t\t\t\tthrow new Error( 'MaterialReducer: Material is recursive.' );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsElement = a instanceof Element;\n\t\t\t\tconst bIsElement = b instanceof Element;\n\t\t\t\tif ( aIsElement || bIsElement ) {\n\n\t\t\t\t\tif ( aIsElement !== bIsElement || ! ( a instanceof Image ) || ! ( b instanceof Image ) ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn a.src === b.src;\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsImageBitmap = a instanceof ImageBitmap;\n\t\t\t\tconst bIsImageBitmap = b instanceof ImageBitmap;\n\t\t\t\tif ( aIsImageBitmap || bIsImageBitmap ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tif ( a.equals ) {\n\n\t\t\t\t\treturn a.equals( b );\n\n\t\t\t\t}\n\n\t\t\t\tconst aIsTypedArray = isTypedArray( a );\n\t\t\t\tconst bIsTypedArray = isTypedArray( b );\n\t\t\t\tif ( aIsTypedArray || bIsTypedArray ) {\n\n\t\t\t\t\tif ( aIsTypedArray !== bIsTypedArray || a.constructor !== b.constructor || a.length !== b.length ) {\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.add( a );\n\t\t\t\ttraverseSet.add( b );\n\n\t\t\t\tkeySet.clear();\n\t\t\t\tfor ( const key in a ) {\n\n\t\t\t\t\tif ( ! a.hasOwnProperty( key ) || a[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const key in b ) {\n\n\t\t\t\t\tif ( ! b.hasOwnProperty( key ) || b[ key ] instanceof Function || ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tkeySet.add( key );\n\n\t\t\t\t}\n\n\t\t\t\tconst keys = Array.from( keySet.values() );\n\t\t\t\tlet result = true;\n\t\t\t\tfor ( const i in keys ) {\n\n\t\t\t\t\tconst key = keys[ i ];\n\t\t\t\t\tif ( ignoreKeys.has( key ) ) {\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult = traverse( a[ key ], b[ key ] );\n\t\t\t\t\tif ( ! result ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttraverseSet.delete( a );\n\t\t\t\ttraverseSet.delete( b );\n\t\t\t\treturn result;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t\treturn traverse( objectA, objectB );\n\n\t}\n\n\tprocess( object ) {\n\n\t\tconst { textures, materials } = this;\n\t\tlet replaced = 0;\n\n\t\tconst processMaterial = material => {\n\n\t\t\t// Check if another material matches this one\n\t\t\tlet foundMaterial = null;\n\t\t\tfor ( const i in materials ) {\n\n\t\t\t\tconst otherMaterial = materials[ i ];\n\t\t\t\tif ( this.areEqual( material, otherMaterial ) ) {\n\n\t\t\t\t\tfoundMaterial = otherMaterial;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( foundMaterial ) {\n\n\t\t\t\treplaced ++;\n\t\t\t\treturn foundMaterial;\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( material );\n\n\t\t\t\tif ( this.shareTextures ) {\n\n\t\t\t\t\t// See if there's another texture that matches the ones on this material\n\t\t\t\t\tfor ( const key in material ) {\n\n\t\t\t\t\t\tif ( ! material.hasOwnProperty( key ) ) continue;\n\n\t\t\t\t\t\tconst value = material[ key ];\n\t\t\t\t\t\tif ( value && value.isTexture && value.image instanceof Image ) {\n\n\t\t\t\t\t\t\tlet foundTexture = null;\n\t\t\t\t\t\t\tfor ( const i in textures ) {\n\n\t\t\t\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\t\t\t\tif ( this.areEqual( texture, value ) ) {\n\n\t\t\t\t\t\t\t\t\tfoundTexture = texture;\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( foundTexture ) {\n\n\t\t\t\t\t\t\t\tmaterial[ key ] = foundTexture;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\ttextures.push( value );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn material;\n\n\t\t\t}\n\n\t\t};\n\n\t\tobject.traverse( c => {\n\n\t\t\tif ( c.isMesh && c.material ) {\n\n\t\t\t\tconst material = c.material;\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tmaterial[ i ] = processMaterial( material[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tc.material = processMaterial( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\treturn { replaced, retained: materials.length };\n\n\t}\n\n}\n","import { PerspectiveCamera } from 'three';\n\nexport class PhysicalCamera extends PerspectiveCamera {\n\n\tset bokehSize( size ) {\n\n\t\tthis.fStop = this.getFocalLength() / size;\n\n\t}\n\n\tget bokehSize() {\n\n\t\treturn this.getFocalLength() / this.fStop;\n\n\t}\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\t\tthis.fStop = 1.4;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 25;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n}\n","import { WebGLRenderTarget, RGBAFormat, FloatType, PMREMGenerator, DataTexture, EquirectangularReflectionMapping } from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { MaterialBase } from '../materials/MaterialBase.js';\nimport { shaderUtils } from '../shader/shaderUtils.js';\n\nclass PMREMCopyMaterial extends MaterialBase {\n\n\tconstructor() {\n\n\t\tsuper( {\n\n\t\t\tuniforms: {\n\n\t\t\t\tenvMap: { value: null },\n\t\t\t\tblur: { value: 0 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\t\t${ shaderUtils }\n\n\t\t\t\tuniform sampler2D envMap;\n\t\t\t\tuniform float blur;\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 rayDirection = equirectUvToDirection( vUv );\n\t\t\t\t\tgl_FragColor = textureCubeUV( envMap, rayDirection, blur );\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t} );\n\n\t}\n\n}\n\nexport class BlurredEnvMapGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis.renderer = renderer;\n\t\tthis.pmremGenerator = new PMREMGenerator( renderer );\n\t\tthis.copyQuad = new FullScreenQuad( new PMREMCopyMaterial() );\n\t\tthis.renderTarget = new WebGLRenderTarget( 1, 1, { type: FloatType, format: RGBAFormat } );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.pmremGenerator.dispose();\n\t\tthis.copyQuad.dispose();\n\t\tthis.renderTarget.dispose();\n\n\t}\n\n\tgenerate( texture, blur ) {\n\n\t\tconst { pmremGenerator, renderTarget, copyQuad, renderer } = this;\n\n\t\t// get the pmrem target\n\t\tconst pmremTarget = pmremGenerator.fromEquirectangular( texture );\n\n\t\t// set up the material\n\t\tconst { width, height } = texture.image;\n\t\trenderTarget.setSize( width, height );\n\t\tcopyQuad.material.envMap = pmremTarget.texture;\n\t\tcopyQuad.material.blur = blur;\n\n\t\t// render\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevClear = renderer.autoClear;\n\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trenderer.autoClear = true;\n\t\tcopyQuad.render( renderer );\n\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.autoClear = prevClear;\n\n\t\t// read the data back\n\t\tconst buffer = new Float32Array( width * height * 4 );\n\t\trenderer.readRenderTargetPixels( renderTarget, 0, 0, width, height, buffer );\n\n\t\tconst result = new DataTexture( buffer, width, height, RGBAFormat, FloatType );\n\t\tresult.minFilter = texture.minFilter;\n\t\tresult.magFilter = texture.magFilter;\n\t\tresult.wrapS = texture.wrapS;\n\t\tresult.wrapT = texture.wrapT;\n\t\tresult.mapping = EquirectangularReflectionMapping;\n\t\tresult.needsUpdate = true;\n\n\t\treturn result;\n\n\t}\n\n}\n","import { Matrix4, Matrix3, Color, Vector2 } from 'three';\nimport { MaterialBase } from './MaterialBase.js';\nimport {\n\tMeshBVHUniformStruct, FloatVertexAttributeTexture, UIntVertexAttributeTexture,\n\tshaderStructs, shaderIntersectFunction,\n} from 'three-mesh-bvh';\nimport { shaderMaterialStructs } from '../shader/shaderStructs.js';\nimport { MaterialsTexture } from '../uniforms/MaterialsTexture.js';\nimport { RenderTarget2DArray } from '../uniforms/RenderTarget2DArray.js';\nimport { shaderMaterialSampling } from '../shader/shaderMaterialSampling.js';\nimport { shaderEnvMapSampling } from '../shader/shaderEnvMapSampling.js';\nimport { shaderUtils } from '../shader/shaderUtils.js';\nimport { PhysicalCameraUniform } from '../uniforms/PhysicalCameraUniform.js';\nimport { EquirectHdrInfoUniform } from '../uniforms/EquirectHdrInfoUniform.js';\n\nexport class PhysicalPathTracingMaterial extends MaterialBase {\n\n\tonBeforeRender() {\n\n\t\tthis.setDefine( 'FEATURE_DOF', this.physicalCamera.bokehSize === 0 ? 0 : 1 );\n\n\t}\n\n\tconstructor( parameters ) {\n\n\t\tsuper( {\n\n\t\t\ttransparent: true,\n\t\t\tdepthWrite: false,\n\n\t\t\tdefines: {\n\t\t\t\tFEATURE_MIS: 1,\n\t\t\t\tFEATURE_DOF: 1,\n\t\t\t\tFEATURE_GRADIENT_BG: 0,\n\t\t\t\tTRANSPARENT_TRAVERSALS: 5,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\tresolution: { value: new Vector2() },\n\n\t\t\t\tbounces: { value: 3 },\n\t\t\t\tphysicalCamera: { value: new PhysicalCameraUniform() },\n\n\t\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\t\tnormalAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\ttangentAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tuvAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\t\tmaterialIndexAttribute: { value: new UIntVertexAttributeTexture() },\n\t\t\t\tmaterials: { value: new MaterialsTexture() },\n\t\t\t\ttextures: { value: new RenderTarget2DArray().texture },\n\t\t\t\tcameraWorldMatrix: { value: new Matrix4() },\n\t\t\t\tinvProjectionMatrix: { value: new Matrix4() },\n\t\t\t\tisOrthographicCamera: { value: true },\n\t\t\t\tbackgroundBlur: { value: 0.0 },\n\t\t\t\tenvironmentIntensity: { value: 2.0 },\n\t\t\t\tenvironmentRotation: { value: new Matrix3() },\n\t\t\t\tenvMapInfo: { value: new EquirectHdrInfoUniform() },\n\n\t\t\t\tseed: { value: 0 },\n\t\t\t\topacity: { value: 1 },\n\t\t\t\tfilterGlossyFactor: { value: 0.0 },\n\n\t\t\t\tbgGradientTop: { value: new Color( 0x111111 ) },\n\t\t\t\tbgGradientBottom: { value: new Color( 0x000000 ) },\n\t\t\t\tbackgroundAlpha: { value: 1.0 },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t\tvUv = uv;\n\n\t\t\t\t}\n\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\t#define RAY_OFFSET 1e-4\n\n\t\t\t\tprecision highp isampler2D;\n\t\t\t\tprecision highp usampler2D;\n\t\t\t\tprecision highp sampler2DArray;\n\t\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\t\t\t\t#include <common>\n\n\t\t\t\t${ shaderStructs }\n\t\t\t\t${ shaderIntersectFunction }\n\t\t\t\t${ shaderMaterialStructs }\n\n\t\t\t\t${ shaderUtils }\n\t\t\t\t${ shaderMaterialSampling }\n\t\t\t\t${ shaderEnvMapSampling }\n\n\t\t\t\tuniform mat3 environmentRotation;\n\t\t\t\tuniform float backgroundBlur;\n\t\t\t\tuniform float backgroundAlpha;\n\n\t\t\t\t#if FEATURE_GRADIENT_BG\n\n\t\t\t\tuniform vec3 bgGradientTop;\n\t\t\t\tuniform vec3 bgGradientBottom;\n\n\t\t\t\t#endif\n\n\t\t\t\t#if FEATURE_DOF\n\n\t\t\t\tuniform PhysicalCamera physicalCamera;\n\n\t\t\t\t#endif\n\n\t\t\t\tuniform vec2 resolution;\n\t\t\t\tuniform int bounces;\n\t\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\t\tuniform bool isOrthographicCamera;\n\t\t\t\tuniform sampler2D normalAttribute;\n\t\t\t\tuniform sampler2D tangentAttribute;\n\t\t\t\tuniform sampler2D uvAttribute;\n\t\t\t\tuniform usampler2D materialIndexAttribute;\n\t\t\t\tuniform BVH bvh;\n\t\t\t\tuniform float environmentIntensity;\n\t\t\t\tuniform float filterGlossyFactor;\n\t\t\t\tuniform int seed;\n\t\t\t\tuniform float opacity;\n\t\t\t\tuniform sampler2D materials;\n\n\t\t\t\tuniform EquirectHdrInfo envMapInfo;\n\n\t\t\t\tuniform sampler2DArray textures;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvec3 sampleBackground( vec3 direction ) {\n\n\t\t\t\t\t#if FEATURE_GRADIENT_BG\n\n\t\t\t\t\tdirection = normalize( direction + randDirection() * 0.05 );\n\n\t\t\t\t\tfloat value = ( direction.y + 1.0 ) / 2.0;\n\t\t\t\t\tvalue = pow( value, 2.0 );\n\n\t\t\t\t\treturn mix( bgGradientBottom, bgGradientTop, value );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\tvec3 sampleDir = normalize( direction + getHemisphereSample( direction, rand2() ) * 0.5 * backgroundBlur );\n\t\t\t\t\treturn environmentIntensity * sampleEquirectEnvMapColor( sampleDir, envMapInfo.map );\n\n\t\t\t\t\t#endif\n\n\t\t\t\t}\n\n\t\t\t\t// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces\n\t\t\t\tbool attenuateHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection, int traversals, bool isShadowRay, out vec3 color ) {\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\tcolor = vec3( 1.0 );\n\n\t\t\t\t\tfor ( int i = 0; i < traversals; i ++ ) {\n\n\t\t\t\t\t\tif ( bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\t\t// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values\n\t\t\t\t\t\t\t// Should be able to work using the material BSDF functions which will take into account specularity, etc.\n\t\t\t\t\t\t\t// TODO: should we account for emissive surfaces here?\n\n\t\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( uvAttribute, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\t\t// adjust the ray to the new surface\n\t\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Opacity Test\n\n\t\t\t\t\t\t\t// albedo\n\t\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\t\tif ( material.alphaMap != -1 ) {\n\n\t\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// transmission\n\t\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// metalness\n\t\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\t\tfloat transmissionFactor = ( 1.0 - metalness ) * transmission;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\ttransmissionFactor < rand() && ! (\n\t\t\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\t\t\tmaterial.side != 0.0 && side == material.side\n\n\t\t\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t\t\t|| ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// only attenuate on the way in\n\t\t\t\t\t\t\tif ( isBelowSurface ) {\n\n\t\t\t\t\t\t\t\tcolor *= albedo.rgb;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\t// returns whether the ray hit anything, not just the first surface. Could be optimized to not check the full hierarchy.\n\t\t\t\tbool anyHit( BVH bvh, vec3 rayOrigin, vec3 rayDirection ) {\n\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\t\t\t\t\treturn bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );\n\n\t\t\t\t}\n\n\t\t\t\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t\t\t\t// erichlof/THREE.js-PathTracing-Renderer/\n\t\t\t\tfloat tentFilter( float x ) {\n\n\t\t\t\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t\t\t\t}\n\n\t\t\t\tvec3 ndcToRayOrigin( vec2 coord ) {\n\n\t\t\t\t\tvec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );\n\t\t\t\t\treturn rayOrigin4.xyz / rayOrigin4.w;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\trng_initialize( gl_FragCoord.xy, seed );\n\n\t\t\t\t\t// get [-1, 1] normalized device coordinates\n\t\t\t\t\tvec2 ndc = 2.0 * vUv - vec2( 1.0 );\n\n\t\t\t\t\tvec3 ss00 = ndcToRayOrigin( vec2( - 1.0, - 1.0 ) );\n\t\t\t\t\tvec3 ss01 = ndcToRayOrigin( vec2( - 1.0, 1.0 ) );\n\t\t\t\t\tvec3 ss10 = ndcToRayOrigin( vec2( 1.0, - 1.0 ) );\n\n\t\t\t\t\tvec3 ssdX = ( ss10 - ss00 ) / resolution.x;\n\t\t\t\t\tvec3 ssdY = ( ss01 - ss00 ) / resolution.y;\n\n\t\t\t\t\t// Jitter the camera ray by finding a new subpixel point to point to from the camera origin\n\t\t\t\t\t// This is better than just jittering the camera position since it actually results in divergent\n\t\t\t\t\t// rays providing better coverage for the pixel\n\t\t\t\t\tvec3 rayOrigin = ndcToRayOrigin( ndc ) + tentFilter( rand() ) * ssdX + tentFilter( rand() ) * ssdY;\n\n\t\t\t\t\tvec3 rayDirection;\n\n\t\t\t\t\tif ( isOrthographicCamera ) {\n\n\t\t\t\t\t\trayDirection = ( cameraWorldMatrix * vec4( 0.0, 0.0, -1.0, 0.0 ) ).xyz;\n\t\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvec3 cameraOrigin = ( cameraWorldMatrix * vec4( 0.0, 0.0, 0.0, 1.0 ) ).xyz;\n\t\t\t\t\t\trayDirection = normalize( rayOrigin - cameraOrigin );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t#if FEATURE_DOF\n\t\t\t\t\t{\n\n\t\t\t\t\t\t// depth of field\n\t\t\t\t\t\tvec3 focalPoint = rayOrigin + normalize( rayDirection ) * physicalCamera.focusDistance;\n\n\t\t\t\t\t\t// get the aperture sample\n\t\t\t\t\t\tvec2 apertureSample = sampleAperture( physicalCamera.apertureBlades ) * physicalCamera.bokehSize * 0.5 * 1e-3;\n\n\t\t\t\t\t\t// rotate the aperture shape\n\t\t\t\t\t\tfloat ac = cos( physicalCamera.apertureRotation );\n\t\t\t\t\t\tfloat as = sin( physicalCamera.apertureRotation );\n\t\t\t\t\t\tapertureSample = vec2(\n\t\t\t\t\t\t\tapertureSample.x * ac - apertureSample.y * as,\n\t\t\t\t\t\t\tapertureSample.x * as + apertureSample.y * ac\n\t\t\t\t\t\t);\n\t\t\t\t\t\tapertureSample.x *= saturate( physicalCamera.anamorphicRatio );\n\t\t\t\t\t\tapertureSample.y *= saturate( 1.0 / physicalCamera.anamorphicRatio );\n\n\t\t\t\t\t\t// create the new ray\n\t\t\t\t\t\trayOrigin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;\n\t\t\t\t\t\trayDirection = focalPoint - rayOrigin;\n\n\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t\trayDirection = normalize( rayDirection );\n\n\t\t\t\t\t// inverse environment rotation\n\t\t\t\t\tmat3 invEnvironmentRotation = inverse( environmentRotation );\n\n\t\t\t\t\t// final color\n\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\tgl_FragColor.a = 1.0;\n\n\t\t\t\t\t// hit results\n\t\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\t\tfloat side = 1.0;\n\t\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\t\t// path tracing state\n\t\t\t\t\tfloat accumulatedRoughness = 0.0;\n\t\t\t\t\tbool transmissiveRay = true;\n\t\t\t\t\tint transparentTraversals = TRANSPARENT_TRAVERSALS;\n\t\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\t\tSampleRec sampleRec;\n\t\t\t\t\tint i;\n\t\t\t\t\tbool isShadowRay = false;\n\n\t\t\t\t\tfor ( i = 0; i < bounces; i ++ ) {\n\n\t\t\t\t\t\tif ( ! bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\t\tif ( i == 0 || transmissiveRay ) {\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += sampleBackground( environmentRotation * rayDirection ) * throughputColor;\n\t\t\t\t\t\t\t\tgl_FragColor.a = backgroundAlpha;\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t#if FEATURE_MIS\n\n\t\t\t\t\t\t\t\t// get the PDF of the hit envmap point\n\t\t\t\t\t\t\t\tvec3 envColor;\n\t\t\t\t\t\t\t\tfloat envPdf = envMapSample( environmentRotation * rayDirection, envMapInfo, envColor );\n\n\t\t\t\t\t\t\t\t// and weight the contribution\n\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( sampleRec.pdf, envPdf );\n\t\t\t\t\t\t\t\tgl_FragColor.rgb += environmentIntensity * envColor * throughputColor * misWeight;\n\n\t\t\t\t\t\t\t\t#else\n\n\t\t\t\t\t\t\t\tgl_FragColor.rgb +=\n\t\t\t\t\t\t\t\t\tenvironmentIntensity *\n\t\t\t\t\t\t\t\t\tsampleEquirectEnvMapColor( environmentRotation * rayDirection, envMapInfo.map ) *\n\t\t\t\t\t\t\t\t\tthroughputColor;\n\n\t\t\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tuint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;\n\t\t\t\t\t\tMaterial material = readMaterialInfo( materials, materialIndex );\n\n\t\t\t\t\t\tif ( material.matte && i == 0 ) {\n\n\t\t\t\t\t\t\tgl_FragColor = vec4( 0.0 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if we've determined that this is a shadow ray and we've hit an item with no shadow casting\n\t\t\t\t\t\t// then skip it\n\t\t\t\t\t\tif ( ! material.castShadow && isShadowRay ) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvec2 uv = textureSampleBarycoord( uvAttribute, barycoord, faceIndices.xyz ).xy;\n\t\t\t\t\t\t// albedo\n\t\t\t\t\t\tvec4 albedo = vec4( material.color, material.opacity );\n\t\t\t\t\t\tif ( material.map != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.mapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\talbedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// alphaMap\n\t\t\t\t\t\tif ( material.alphaMap != -1 ) {\n\n\t\t\t\t\t\t\talbedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;\n\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side\n\t\t\t\t\t\t// and it's single sided.\n\t\t\t\t\t\t// - alpha test is disabled when it === 0\n\t\t\t\t\t\t// - the material sidedness test is complicated because we want light to pass through the back side but still\n\t\t\t\t\t\t// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray\n\t\t\t\t\t\t// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.\n\t\t\t\t\t\tfloat alphaTest = material.alphaTest;\n\t\t\t\t\t\tbool useAlphaTest = alphaTest != 0.0;\n\t\t\t\t\t\tbool isFirstHit = i == 0;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t// material sidedness\n\t\t\t\t\t\t\tmaterial.side != 0.0 && ( side != material.side ) == isFirstHit\n\n\t\t\t\t\t\t\t// alpha test\n\t\t\t\t\t\t\t|| useAlphaTest && albedo.a < alphaTest\n\n\t\t\t\t\t\t\t// opacity\n\t\t\t\t\t\t\t|| ! useAlphaTest && albedo.a < rand()\n\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\t\trayOrigin = point - ( maxPoint + 1.0 ) * faceNormal * RAY_OFFSET;\n\n\t\t\t\t\t\t\t// only allow a limited number of transparency discards otherwise we could\n\t\t\t\t\t\t\t// crash the context with too long a loop.\n\t\t\t\t\t\t\ti -= sign( transparentTraversals );\n\t\t\t\t\t\t\ttransparentTraversals -= sign( transparentTraversals );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\t\tvec3 normal = normalize( textureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz );\n\n\t\t\t\t\t\t// roughness\n\t\t\t\t\t\tfloat roughness = material.roughness;\n\t\t\t\t\t\tif ( material.roughnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\troughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// metalness\n\t\t\t\t\t\tfloat metalness = material.metalness;\n\t\t\t\t\t\tif ( material.metalnessMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\tmetalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// emission\n\t\t\t\t\t\tvec3 emission = material.emissiveIntensity * material.emissive;\n\t\t\t\t\t\tif ( material.emissiveMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\temission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// transmission\n\t\t\t\t\t\tfloat transmission = material.transmission;\n\t\t\t\t\t\tif ( material.transmissionMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\ttransmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// normal\n\t\t\t\t\t\tif ( material.normalMap != - 1 ) {\n\n\t\t\t\t\t\t\tvec4 tangentSample = textureSampleBarycoord(\n\t\t\t\t\t\t\t\ttangentAttribute,\n\t\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate\n\t\t\t\t\t\t\t// resulting in NaNs and slow path tracing.\n\t\t\t\t\t\t\tif ( length( tangentSample.xyz ) > 0.0 ) {\n\n\t\t\t\t\t\t\t\tvec3 tangent = normalize( tangentSample.xyz );\n\t\t\t\t\t\t\t\tvec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );\n\t\t\t\t\t\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t\t\t\t\t\t\tvec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );\n\t\t\t\t\t\t\t\tvec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;\n\t\t\t\t\t\t\t\ttexNormal.xy *= material.normalScale;\n\t\t\t\t\t\t\t\tnormal = vTBN * texNormal;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnormal *= side;\n\n\t\t\t\t\t\tSurfaceRec surfaceRec;\n\t\t\t\t\t\tsurfaceRec.normal = normal;\n\t\t\t\t\t\tsurfaceRec.faceNormal = faceNormal;\n\t\t\t\t\t\tsurfaceRec.transmission = transmission;\n\t\t\t\t\t\tsurfaceRec.ior = material.ior;\n\t\t\t\t\t\tsurfaceRec.emission = emission;\n\t\t\t\t\t\tsurfaceRec.metalness = metalness;\n\t\t\t\t\t\tsurfaceRec.color = albedo.rgb;\n\t\t\t\t\t\tsurfaceRec.roughness = roughness;\n\n\t\t\t\t\t\t// frontFace is used to determine transmissive properties and PDF. If no transmission is used\n\t\t\t\t\t\t// then we can just always assume this is a front face.\n\t\t\t\t\t\tsurfaceRec.frontFace = side == 1.0 || transmission == 0.0;\n\n\t\t\t\t\t\t// Compute the filtered roughness value to use during specular reflection computations. A minimum\n\t\t\t\t\t\t// value of 1e-6 is needed because the GGX functions do not work with a roughness value of 0 and\n\t\t\t\t\t\t// the accumulated roughness value is scaled by a user setting and a \"magic value\" of 5.0.\n\t\t\t\t\t\t// If we're exiting something transmissive then scale the factor down significantly so we can retain\n\t\t\t\t\t\t// sharp internal reflections\n\t\t\t\t\t\tsurfaceRec.filteredRoughness = clamp(\n\t\t\t\t\t\t\tmax( surfaceRec.roughness, accumulatedRoughness * filterGlossyFactor * 5.0 ),\n\t\t\t\t\t\t\t1e-3,\n\t\t\t\t\t\t\t1.0\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tmat3 normalBasis = getBasisFromNormal( surfaceRec.normal );\n\t\t\t\t\t\tmat3 invBasis = inverse( normalBasis );\n\n\t\t\t\t\t\tvec3 outgoing = - normalize( invBasis * rayDirection );\n\t\t\t\t\t\tsampleRec = bsdfSample( outgoing, surfaceRec );\n\n\t\t\t\t\t\tfloat specRayPdf = specularPDF( outgoing, sampleRec.direction, surfaceRec );\n\t\t\t\t\t\tisShadowRay = sampleRec.specularPdf < rand();\n\n\t\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t\t// error as values increase.\n\t\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\t\trayDirection = normalize( normalBasis * sampleRec.direction );\n\n\t\t\t\t\t\tbool isBelowSurface = dot( rayDirection, faceNormal ) < 0.0;\n\t\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * ( isBelowSurface ? - RAY_OFFSET : RAY_OFFSET );\n\n\t\t\t\t\t\t// direct env map sampling\n\t\t\t\t\t\t#if FEATURE_MIS\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t// find a sample in the environment map to include in the contribution\n\t\t\t\t\t\t\tvec3 envColor, envDirection;\n\t\t\t\t\t\t\tfloat envPdf = randomEnvMapSample( envMapInfo, envColor, envDirection );\n\t\t\t\t\t\t\tenvDirection = invEnvironmentRotation * envDirection;\n\n\t\t\t\t\t\t\t// this env sampling is not set up for transmissive sampling and yields overly bright\n\t\t\t\t\t\t\t// results so we ignore the sample in this case.\n\t\t\t\t\t\t\t// TODO: this should be improved but how? The env samples could traverse a few layers?\n\t\t\t\t\t\t\tbool isSampleBelowSurface = dot( faceNormal, envDirection ) < 0.0;\n\t\t\t\t\t\t\tif ( isSampleBelowSurface ) {\n\n\t\t\t\t\t\t\t\tenvPdf = 0.0;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check if a ray could even reach the surface\n\t\t\t\t\t\t\tvec3 attenuatedColor;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tenvPdf > 0.0 &&\n\t\t\t\t\t\t\t\tisDirectionValid( envDirection, normal, faceNormal ) &&\n\t\t\t\t\t\t\t\t! attenuateHit( bvh, rayOrigin, envDirection, bounces - i, isShadowRay, attenuatedColor )\n\t\t\t\t\t\t\t) {\n\n\t\t\t\t\t\t\t\t// get the material pdf\n\t\t\t\t\t\t\t\tvec3 sampleColor;\n\t\t\t\t\t\t\t\tfloat envMaterialPdf = bsdfResult( outgoing, normalize( invBasis * envDirection ), surfaceRec, sampleColor );\n\t\t\t\t\t\t\t\tif ( envMaterialPdf > 0.0 ) {\n\n\t\t\t\t\t\t\t\t\t// weight the direct light contribution\n\t\t\t\t\t\t\t\t\tfloat misWeight = misHeuristic( envPdf, envMaterialPdf );\n\t\t\t\t\t\t\t\t\tgl_FragColor.rgb += attenuatedColor * environmentIntensity * envColor * throughputColor * sampleColor * misWeight / envPdf;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\n\t\t\t\t\t\t// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution\n\t\t\t\t\t\t// to a single pixel resulting in fireflies\n\t\t\t\t\t\tif ( ! isBelowSurface ) {\n\n\t\t\t\t\t\t\t// determine if this is a rough normal or not by checking how far off straight up it is\n\t\t\t\t\t\t\tvec3 halfVector = normalize( outgoing + sampleRec.direction );\n\t\t\t\t\t\t\taccumulatedRoughness += sin( acos( halfVector.z ) );\n\t\t\t\t\t\t\ttransmissiveRay = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// accumulate color\n\t\t\t\t\t\tgl_FragColor.rgb += ( emission * throughputColor );\n\n\t\t\t\t\t\t// skip the sample if our PDF or ray is impossible\n\t\t\t\t\t\tif ( sampleRec.pdf <= 0.0 || ! isDirectionValid( rayDirection, normal, faceNormal) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthroughputColor *= sampleRec.color / sampleRec.pdf;\n\n\t\t\t\t\t\t// discard the sample if there are any NaNs\n\t\t\t\t\t\tif ( any( isnan( throughputColor ) ) || any( isinf( throughputColor ) ) ) {\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\n\t\t\t\t}\n\n\t\t\t`\n\n\t\t} );\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n}\n","import { DataTexture, RGBAFormat, ClampToEdgeWrapping, FloatType, FrontSide, BackSide, DoubleSide } from 'three';\n\nconst MATERIAL_PIXELS = 19;\nconst MATERIAL_STRIDE = MATERIAL_PIXELS * 4;\n\nexport class MaterialsTexture extends DataTexture {\n\n\tconstructor() {\n\n\t\tsuper( new Float32Array( 4 ), 1, 1 );\n\n\t\tthis.format = RGBAFormat;\n\t\tthis.type = FloatType;\n\t\tthis.wrapS = ClampToEdgeWrapping;\n\t\tthis.wrapT = ClampToEdgeWrapping;\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n\tsetCastShadow( materialIndex, cast ) {\n\n\t\t// invert the shadow value so we default to \"true\" when initializing a material\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 6 * 4 + 0;\n\t\tarray[ index ] = ! cast ? 1 : 0;\n\n\t}\n\n\tgetCastShadow( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 6 * 4 + 0;\n\t\treturn ! Boolean( array[ index ] );\n\n\t}\n\n\tsetSide( materialIndex, side ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 5 * 4 + 2;\n\t\tswitch ( side ) {\n\n\t\t\tcase FrontSide:\n\t\t\t\tarray[ index ] = 1;\n\t\t\t\tbreak;\n\t\t\tcase BackSide:\n\t\t\t\tarray[ index ] = - 1;\n\t\t\t\tbreak;\n\t\t\tcase DoubleSide:\n\t\t\t\tarray[ index ] = 0;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tgetSide( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 5 * 4 + 2;\n\t\tswitch ( array[ index ] ) {\n\n\t\t\tcase 0:\n\t\t\t\treturn DoubleSide;\n\t\t\tcase 1:\n\t\t\t\treturn FrontSide;\n\t\t\tcase - 1:\n\t\t\t\treturn BackSide;\n\n\t\t}\n\n\t\treturn 0;\n\n\t}\n\n\tsetMatte( materialIndex, matte ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 5 * 4 + 3;\n\t\tarray[ index ] = matte ? 1 : 0;\n\n\t}\n\n\tgetMatte( materialIndex ) {\n\n\t\tconst array = this.image.data;\n\t\tconst index = materialIndex * MATERIAL_STRIDE + 5 * 4 + 3;\n\t\treturn Boolean( array[ index ] );\n\n\t}\n\n\tupdateFrom( materials, textures ) {\n\n\t\tfunction getTexture( material, key, def = - 1 ) {\n\n\t\t\treturn key in material ? textures.indexOf( material[ key ] ) : def;\n\n\t\t}\n\n\t\tfunction getField( material, key, def ) {\n\n\t\t\treturn key in material ? material[ key ] : def;\n\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {Object} material\n\t\t * @param {string} textureKey\n\t\t * @param {Float32Array} array\n\t\t * @param {number} offset\n\t\t * @returns {8} number of floats occupied by texture transform matrix\n\t\t */\n\t\tfunction writeTextureMatrixToArray( material, textureKey, array, offset ) {\n\n\t\t\t// check if texture exists\n\t\t\tif ( material[ textureKey ] && material[ textureKey ].isTexture ) {\n\n\t\t\t\tconst elements = material[ textureKey ].matrix.elements;\n\n\t\t\t\tlet i = 0;\n\n\t\t\t\t// first row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 0 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 3 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 6 ];\n\t\t\t\ti ++;\n\n\t\t\t\t// second row\n\t\t\t\tarray[ offset + i ++ ] = elements[ 1 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 4 ];\n\t\t\t\tarray[ offset + i ++ ] = elements[ 7 ];\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn 8;\n\n\t\t}\n\n\t\tlet index = 0;\n\t\tconst pixelCount = materials.length * MATERIAL_PIXELS;\n\t\tconst dimension = Math.ceil( Math.sqrt( pixelCount ) );\n\n\t\tif ( this.image.width !== dimension ) {\n\n\t\t\tthis.dispose();\n\n\t\t\tthis.image.data = new Float32Array( dimension * dimension * 4 );\n\t\t\tthis.image.width = dimension;\n\t\t\tthis.image.height = dimension;\n\n\t\t}\n\n\t\tconst floatArray = this.image.data;\n\n\t\t// on some devices (Google Pixel 6) the \"floatBitsToInt\" function does not work correctly so we\n\t\t// can't encode texture ids that way.\n\t\t// const intArray = new Int32Array( floatArray.buffer );\n\n\t\tfor ( let i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\tconst m = materials[ i ];\n\n\t\t\t// color\n\t\t\tfloatArray[ index ++ ] = m.color.r;\n\t\t\tfloatArray[ index ++ ] = m.color.g;\n\t\t\tfloatArray[ index ++ ] = m.color.b;\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'map' );\n\n\t\t\t// metalness & roughness\n\t\t\tfloatArray[ index ++ ] = getField( m, 'metalness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = textures.indexOf( m.metalnessMap );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'roughness', 0.0 );\n\t\t\tfloatArray[ index ++ ] = textures.indexOf( m.roughnessMap );\n\n\t\t\t// transmission & emissiveIntensity\n\t\t\tfloatArray[ index ++ ] = getField( m, 'ior', 1.0 );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'transmission', 0.0 );\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'transmissionMap' );\n\t\t\tfloatArray[ index ++ ] = getField( m, 'emissiveIntensity', 0.0 );\n\n\t\t\t// emission\n\t\t\tif ( 'emissive' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.r;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.g;\n\t\t\t\tfloatArray[ index ++ ] = m.emissive.b;\n\n\t\t\t} else {\n\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\t\t\t\tfloatArray[ index ++ ] = 0.0;\n\n\t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'emissiveMap' );\n\n\t\t\t// normals\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'normalMap' );\n\t\t\tif ( 'normalScale' in m ) {\n\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.x;\n\t\t\t\tfloatArray[ index ++ ] = m.normalScale.y;\n\n \t\t\t} else {\n\n \t\t\t\tfloatArray[ index ++ ] = 1;\n \t\t\t\tfloatArray[ index ++ ] = 1;\n\n \t\t\t}\n\n\t\t\tfloatArray[ index ++ ] = getTexture( m, 'alphaMap' );\n\n\t\t\t// side & matte\n\t\t\tfloatArray[ index ++ ] = m.opacity;\n\t\t\tfloatArray[ index ++ ] = m.alphaTest;\n\t\t\tindex ++; // side\n\t\t\tindex ++; // matte\n\n\t\t\tindex ++; // shadow\n\t\t\tindex ++;\n\t\t\tindex ++;\n\t\t\tindex ++;\n\n\t\t\t// map transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'map', floatArray, index );\n\n\t\t\t// metalnessMap transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'metalnessMap', floatArray, index );\n\n\t\t\t// roughnessMap transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'roughnessMap', floatArray, index );\n\n\t\t\t// transmissionMap transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'transmissionMap', floatArray, index );\n\n\t\t\t// emissiveMap transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'emissiveMap', floatArray, index );\n\n\t\t\t// normalMap transform\n\t\t\tindex += writeTextureMatrixToArray( m, 'normalMap', floatArray, index );\n\n\t\t}\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n","import {\n\tWebGLArrayRenderTarget,\n\tRGBAFormat,\n\tUnsignedByteType,\n\tMeshBasicMaterial,\n\tColor,\n\tRepeatWrapping,\n\tLinearFilter,\n\tNoToneMapping,\n} from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\n\nconst prevColor = new Color();\nexport class RenderTarget2DArray extends WebGLArrayRenderTarget {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconst tex = this.texture;\n\t\ttex.format = RGBAFormat;\n\t\ttex.type = UnsignedByteType;\n\t\ttex.minFilter = LinearFilter;\n\t\ttex.magFilter = LinearFilter;\n\t\ttex.wrapS = RepeatWrapping;\n\t\ttex.wrapT = RepeatWrapping;\n\t\ttex.setTextures = ( ...args ) => {\n\n\t\t\tthis.setTextures( ...args );\n\n\t\t};\n\n\t\tconst fsQuad = new FullScreenQuad( new MeshBasicMaterial() );\n\t\tthis.fsQuad = fsQuad;\n\n\t}\n\n\tsetTextures( renderer, width, height, textures ) {\n\n\t\t// save previous renderer state\n\t\tconst prevRenderTarget = renderer.getRenderTarget();\n\t\tconst prevToneMapping = renderer.toneMapping;\n\t\tconst prevAlpha = renderer.getClearAlpha();\n\t\trenderer.getClearColor( prevColor );\n\n\t\t// resize the render target and ensure we don't have an empty texture\n\t\t// render target depth must be >= 1 to avoid unbound texture error on android devices\n\t\tconst depth = textures.length || 1;\n\t\tthis.setSize( width, height, depth );\n\t\trenderer.setClearColor( 0, 0 );\n\t\trenderer.toneMapping = NoToneMapping;\n\n\t\t// render each texture into each layer of the target\n\t\tconst fsQuad = this.fsQuad;\n\t\tfor ( let i = 0, l = depth; i < l; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\t\t\tif ( texture ) {\n\n\t\t\t\t// revert to default texture transform before rendering\n\t\t\t\ttexture.matrixAutoUpdate = false;\n\t\t\t\ttexture.matrix.identity();\n\n\t\t\t\tfsQuad.material.map = texture;\n\t\t\t\tfsQuad.material.transparent = true;\n\n\t\t\t\trenderer.setRenderTarget( this, i );\n\t\t\t\tfsQuad.render( renderer );\n\n\t\t\t\t// restore custom texture transform\n\t\t\t\ttexture.updateMatrix();\n\t\t\t\ttexture.matrixAutoUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// reset the renderer\n\t\tfsQuad.material.map = null;\n\t\trenderer.setClearColor( prevColor, prevAlpha );\n\t\trenderer.setRenderTarget( prevRenderTarget );\n\t\trenderer.toneMapping = prevToneMapping;\n\n\t}\n\n\tdispose() {\n\n\t\tsuper.dispose();\n\t\tthis.fsQuad.dispose();\n\n\t}\n\n}\n","import { shaderGGXFunctions } from './shaderGGXFunctions.js';\n\nexport const shaderMaterialSampling = /* glsl */`\n\nstruct SurfaceRec {\n\tvec3 normal;\n\tvec3 faceNormal;\n\tbool frontFace;\n\tfloat roughness;\n\tfloat filteredRoughness;\n\tfloat metalness;\n\tvec3 color;\n\tvec3 emission;\n\tfloat transmission;\n\tfloat ior;\n};\n\nstruct SampleRec {\n\tfloat specularPdf;\n\tfloat pdf;\n\tvec3 direction;\n\tvec3 color;\n};\n\n${ shaderGGXFunctions }\n\n// diffuse\nfloat diffusePDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// https://raytracing.github.io/books/RayTracingTheRestOfYourLife.html#lightscattering/thescatteringpdf\n\tfloat cosValue = wi.z;\n\treturn cosValue / PI;\n\n}\n\nvec3 diffuseDirection( vec3 wo, SurfaceRec surf ) {\n\n\tvec3 lightDirection = randDirection();\n\tlightDirection.z += 1.0;\n\tlightDirection = normalize( lightDirection );\n\n\treturn lightDirection;\n\n}\n\nvec3 diffuseColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// TODO: scale by 1 - F here\n\t// note on division by PI\n\t// https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\n\tfloat metalFactor = ( 1.0 - surf.metalness ) * wi.z / ( PI * PI );\n\tfloat transmissionFactor = 1.0 - surf.transmission;\n\treturn surf.color * metalFactor * transmissionFactor;\n\n}\n\n// specular\nfloat specularPDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// See equation (17) in http://jcgt.org/published/0003/02/03/\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tvec3 halfVector = getHalfVector( wi, wo );\n\treturn ggxPDF( wi, halfVector, filteredRoughness ) / ( 4.0 * dot( wi, halfVector ) );\n\n}\n\nvec3 specularDirection( vec3 wo, SurfaceRec surf ) {\n\n\t// sample ggx vndf distribution which gives a new normal\n\tfloat filteredRoughness = surf.filteredRoughness;\n\tvec3 halfVector = ggxDirection(\n\t\two,\n\t\tfilteredRoughness,\n\t\tfilteredRoughness,\n\t\trand(),\n\t\trand()\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\treturn - reflect( wo, halfVector );\n\n}\n\nvec3 specularColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\t// if roughness is set to 0 then D === NaN which results in black pixels\n\tfloat metalness = surf.metalness;\n\tfloat ior = surf.ior;\n\tbool frontFace = surf.frontFace;\n\tfloat filteredRoughness = surf.filteredRoughness;\n\n\tvec3 halfVector = getHalfVector( wo, wi );\n\tfloat iorRatio = frontFace ? 1.0 / ior : ior;\n\tfloat G = ggxShadowMaskG2( wi, wo, filteredRoughness );\n\tfloat D = ggxDistribution( halfVector, filteredRoughness );\n\n\tfloat F = schlickFresnelFromIor( dot( wi, halfVector ), iorRatio );\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tbool cannotRefract = iorRatio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\tF = 1.0;\n\n\t}\n\n\tvec3 color = mix( vec3( 1.0 ), surf.color, metalness );\n\tcolor = mix( color, vec3( 1.0 ), F );\n\tcolor *= G * D / ( 4.0 * abs( wi.z * wo.z ) );\n\tcolor *= mix( F, 1.0, metalness );\n\tcolor *= wi.z; // scale the light by the direction the light is coming in from\n\n\treturn color;\n\n}\n\n/*\n// transmission\nfunction transmissionPDF( wo, wi, material, surf ) {\n\n\t// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\n\tconst { roughness, ior } = material;\n\tconst { frontFace } = hit;\n\tconst ratio = frontFace ? ior : 1 / ior;\n\tconst minRoughness = Math.max( roughness, MIN_ROUGHNESS );\n\n\thalfVector.set( 0, 0, 0 ).addScaledVector( wi, ratio ).addScaledVector( wo, 1.0 ).normalize().multiplyScalar( - 1 );\n\n\tconst denom = Math.pow( ratio * halfVector.dot( wi ) + 1.0 * halfVector.dot( wo ), 2.0 );\n\treturn ggxPDF( wo, halfVector, minRoughness ) / denom;\n\n}\n\nfunction transmissionDirection( wo, hit, material, lightDirection ) {\n\n\tconst { roughness, ior } = material;\n\tconst { frontFace } = hit;\n\tconst ratio = frontFace ? 1 / ior : ior;\n\tconst minRoughness = Math.max( roughness, MIN_ROUGHNESS );\n\n\t// sample ggx vndf distribution which gives a new normal\n\tggxDirection(\n\t\two,\n\t\tminRoughness,\n\t\tminRoughness,\n\t\tMath.random(),\n\t\tMath.random(),\n\t\thalfVector,\n\t);\n\n\t// apply to new ray by reflecting off the new normal\n\ttempDir.copy( wo ).multiplyScalar( - 1 );\n\trefract( tempDir, halfVector, ratio, lightDirection );\n\n}\n\nfunction transmissionColor( wo, wi, material, hit, colorTarget ) {\n\n\tconst { metalness, transmission } = material;\n\tcolorTarget\n\t\t.copy( material.color )\n\t\t.multiplyScalar( ( 1.0 - metalness ) * wo.z )\n\t\t.multiplyScalar( transmission );\n\n}\n*/\n\n// TODO: This is just using a basic cosine-weighted specular distribution with an\n// incorrect PDF value at the moment. Update it to correctly use a GGX distribution\nfloat transmissionPDF( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat ior = surf.ior;\n\tbool frontFace = surf.frontFace;\n\n\tfloat ratio = frontFace ? 1.0 / ior : ior;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, ratio );\n\tbool cannotRefract = ratio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 1.0 - reflectance );\n\n}\n\nvec3 transmissionDirection( vec3 wo, SurfaceRec surf ) {\n\n\tfloat roughness = surf.roughness;\n\tfloat ior = surf.ior;\n\tbool frontFace = surf.frontFace;\n\tfloat ratio = frontFace ? 1.0 / ior : ior;\n\n\tvec3 lightDirection = refract( - wo, vec3( 0.0, 0.0, 1.0 ), ratio );\n\tlightDirection += randDirection() * roughness;\n\treturn normalize( lightDirection );\n\n}\n\nvec3 transmissionColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\n\tvec3 color = surf.color;\n\tcolor *= ( 1.0 - metalness );\n\tcolor *= transmission;\n\n\treturn color;\n\n}\n\nfloat bsdfPdf( vec3 wo, vec3 wi, SurfaceRec surf, out float specularPdf ) {\n\n\tfloat ior = surf.ior;\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\tbool frontFace = surf.frontFace;\n\n\tfloat ratio = frontFace ? 1.0 / ior : ior;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, ratio );\n\tbool cannotRefract = ratio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tfloat spdf = 0.0;\n\tfloat dpdf = 0.0;\n\tfloat tpdf = 0.0;\n\n\tif ( wi.z < 0.0 ) {\n\n\t\ttpdf = transmissionPDF( wo, wi, surf );\n\n\t} else {\n\n\t\tspdf = specularPDF( wo, wi, surf );\n\t\tdpdf = diffusePDF( wo, wi, surf );\n\n\t}\n\n\tfloat transSpecularProb = mix( reflectance, 1.0, metalness );\n\tfloat diffSpecularProb = 0.5 + 0.5 * metalness;\n\tfloat pdf =\n\t\tspdf * transmission * transSpecularProb\n\t\t+ tpdf * transmission * ( 1.0 - transSpecularProb )\n\t\t+ spdf * ( 1.0 - transmission ) * diffSpecularProb\n\t\t+ dpdf * ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb );\n\n\t// retrieve specular rays for the shadows flag\n\tspecularPdf = spdf * transmission * transSpecularProb + spdf * ( 1.0 - transmission ) * diffSpecularProb;\n\n\treturn pdf;\n\n}\n\nvec3 bsdfColor( vec3 wo, vec3 wi, SurfaceRec surf ) {\n\n\tvec3 color = vec3( 0.0 );\n\tif ( wi.z < 0.0 ) {\n\n\t\tcolor = transmissionColor( wo, wi, surf );\n\n\t} else {\n\n\t\tcolor = diffuseColor( wo, wi, surf );\n\t\tcolor *= 1.0 - surf.transmission;\n\n\t\tcolor += specularColor( wo, wi, surf );\n\n\t}\n\n\treturn color;\n\n}\n\nfloat bsdfResult( vec3 wo, vec3 wi, SurfaceRec surf, out vec3 color ) {\n\n\tfloat specularPdf;\n\tcolor = bsdfColor( wo, wi, surf );\n\treturn bsdfPdf( wo, wi, surf, specularPdf );\n\n}\n\nSampleRec bsdfSample( vec3 wo, SurfaceRec surf ) {\n\n\tfloat ior = surf.ior;\n\tfloat metalness = surf.metalness;\n\tfloat transmission = surf.transmission;\n\tbool frontFace = surf.frontFace;\n\n\tfloat ratio = frontFace ? 1.0 / ior : ior;\n\tfloat cosTheta = min( wo.z, 1.0 );\n\tfloat sinTheta = sqrt( 1.0 - cosTheta * cosTheta );\n\tfloat reflectance = schlickFresnelFromIor( cosTheta, ratio );\n\tbool cannotRefract = ratio * sinTheta > 1.0;\n\tif ( cannotRefract ) {\n\n\t\treflectance = 1.0;\n\n\t}\n\n\tSampleRec result;\n\tif ( rand() < transmission ) {\n\n\t\tfloat specularProb = mix( reflectance, 1.0, metalness );\n\t\tif ( rand() < specularProb ) {\n\n\t\t\tresult.direction = specularDirection( wo, surf );\n\n\t\t} else {\n\n\t\t\tresult.direction = transmissionDirection( wo, surf );\n\n\t\t}\n\n\t} else {\n\n\t\tfloat specularProb = 0.5 + 0.5 * metalness;\n\t\tif ( rand() < specularProb ) {\n\n\t\t\tresult.direction = specularDirection( wo, surf );\n\n\t\t} else {\n\n\t\t\tresult.direction = diffuseDirection( wo, surf );\n\n\t\t}\n\n\t}\n\n\tresult.pdf = bsdfPdf( wo, result.direction, surf, result.specularPdf );\n\tresult.color = bsdfColor( wo, result.direction, surf );\n\treturn result;\n\n}\n`;\n","export const shaderGGXFunctions = /* glsl */`\n// The GGX functions provide sampling and distribution information for normals as output so\n// in order to get probability of scatter direction the half vector must be computed and provided.\n// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n// [2] http://jcgt.org/published/0007/04/01/\n// [4] http://jcgt.org/published/0003/02/03/\n\n// trowbridge-reitz === GGX === GTR\n\nvec3 ggxDirection( vec3 incidentDir, float roughnessX, float roughnessY, float random1, float random2 ) {\n\n\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t// function below, as well\n\n\t// Implementation from reference [1]\n\t// stretch view\n\tvec3 V = normalize( vec3( roughnessX * incidentDir.x, roughnessY * incidentDir.y, incidentDir.z ) );\n\n\t// orthonormal basis\n\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\tvec3 T2 = cross( T1, V );\n\n\t// sample point with polar coordinates (r, phi)\n\tfloat a = 1.0 / ( 1.0 + V.z );\n\tfloat r = sqrt( random1 );\n\tfloat phi = ( random2 < a ) ? random2 / a * PI : PI + ( random2 - a ) / ( 1.0 - a ) * PI;\n\tfloat P1 = r * cos( phi );\n\tfloat P2 = r * sin( phi ) * ( ( random2 < a ) ? 1.0 : V.z );\n\n\t// compute normal\n\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t// unstretch\n\tN = normalize( vec3( roughnessX * N.x, roughnessY * N.y, max( 0.0, N.z ) ) );\n\n\treturn N;\n\n}\n\n// Below are PDF and related functions for use in a Monte Carlo path tracer\n// as specified in Appendix B of the following paper\n// See equation (2) from reference [2]\nfloat ggxLamda( float theta, float roughness ) {\n\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = tanTheta * tanTheta;\n\tfloat alpha2 = roughness * roughness;\n\n\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\treturn numerator / 2.0;\n\n}\n\n// See equation (2) from reference [2]\nfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n}\n\n// See equation (125) from reference [4]\nfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat scatterTheta = acos( wo.z );\n\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n}\n\nfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t// See equation (33) from reference [0]\n\tfloat a2 = roughness * roughness;\n\tfloat cosTheta = halfVector.z;\n\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\tif ( cosTheta == 0.0 ) return 0.0;\n\n\tfloat theta = acos( halfVector.z );\n\tfloat tanTheta = tan( theta );\n\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\treturn a2 / denom;\n\n\t// See equation (1) from reference [2]\n\t// const { x, y, z } = halfVector;\n\t// const a2 = roughness * roughness;\n\t// const mult = x * x / a2 + y * y / a2 + z * z;\n\t// const mult2 = mult * mult;\n\n\t// return 1.0 / Math.PI * a2 * mult2;\n\n}\n\n// See equation (3) from reference [2]\nfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\tfloat incidentTheta = acos( wi.z );\n\tfloat D = ggxDistribution( halfVector, roughness );\n\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n}\n`;\n","export const shaderEnvMapSampling = /* glsl */`\n\nvec3 sampleEquirectEnvMapColor( vec3 direction, sampler2D map ) {\n\n\treturn texture2D( map, equirectDirectionToUv( direction ) ).rgb;\n\n}\n\nfloat envMapDirectionPdf( vec3 direction ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tfloat theta = uv.y * PI;\n\tfloat sinTheta = sin( theta );\n\tif ( sinTheta == 0.0 ) {\n\n\t\treturn 0.0;\n\n\t}\n\n\treturn 1.0 / ( 2.0 * PI * PI * sinTheta );\n\n}\n\nfloat envMapSample( vec3 direction, EquirectHdrInfo info, out vec3 color ) {\n\n\tvec2 uv = equirectDirectionToUv( direction );\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = texture2D( info.totalSum, vec2( 0.0 ) ).r;\n\tfloat lum = colorToLuminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\nfloat randomEnvMapSample( EquirectHdrInfo info, out vec3 color, out vec3 direction ) {\n\n\t// sample env map cdf\n\tvec2 r = rand2();\n\tfloat v = texture2D( info.marginalWeights, vec2( r.x, 0.0 ) ).x;\n\tfloat u = texture2D( info.conditionalWeights, vec2( r.y, v ) ).x;\n\tvec2 uv = vec2( u, v );\n\n\tvec3 derivedDirection = equirectUvToDirection( uv );\n\tdirection = derivedDirection;\n\tcolor = texture2D( info.map, uv ).rgb;\n\n\tfloat totalSum = texture2D( info.totalSum, vec2( 0.0 ) ).r;\n\tfloat lum = colorToLuminance( color );\n\tivec2 resolution = textureSize( info.map, 0 );\n\tfloat pdf = lum / totalSum;\n\n\treturn float( resolution.x * resolution.y ) * pdf * envMapDirectionPdf( direction );\n\n}\n\nfloat misHeuristic( float a, float b ) {\n\n\tfloat aa = a * a;\n\tfloat bb = a * b;\n\treturn aa / ( bb + aa );\n\n}\n\n`;\n","import { PhysicalCamera } from '../core/PhysicalCamera.js';\nexport class PhysicalCameraUniform {\n\n\tconstructor() {\n\n\t\tthis.bokehSize = 0;\n\t\tthis.apertureBlades = 0;\n\t\tthis.apertureRotation = 0;\n\t\tthis.focusDistance = 10;\n\t\tthis.anamorphicRatio = 1;\n\n\t}\n\n\tupdateFrom( camera ) {\n\n\t\tif ( camera instanceof PhysicalCamera ) {\n\n\t\t\tthis.bokehSize = camera.bokehSize;\n\t\t\tthis.apertureBlades = camera.apertureBlades;\n\t\t\tthis.apertureRotation = camera.apertureRotation;\n\t\t\tthis.focusDistance = camera.focusDistance;\n\t\t\tthis.anamorphicRatio = camera.anamorphicRatio;\n\n\t\t} else {\n\n\t\t\tthis.bokehSize = 0;\n\t\t\tthis.apertureRotation = 0;\n\t\t\tthis.apertureBlades = 0;\n\t\t\tthis.focusDistance = 10;\n\t\t\tthis.anamorphicRatio = 1;\n\n\t\t}\n\n\t}\n\n}\n","import { DataTexture, FloatType, RedFormat, LinearFilter, DataUtils, HalfFloatType, Source, RepeatWrapping } from 'three';\n\nfunction binarySearchFindClosestIndexOf( array, targetValue, offset = 0, count = array.length ) {\n\n\tlet lower = 0;\n\tlet upper = count;\n\twhile ( lower < upper ) {\n\n\t\tconst mid = ~ ~ ( 0.5 * upper + 0.5 * lower );\n\n\n\t\t// check if the middle array value is above or below the target and shift\n\t\t// which half of the array we're looking at\n\t\tif ( array[ offset + mid ] < targetValue ) {\n\n\t\t\tlower = mid + 1;\n\n\t\t} else {\n\n\t\t\tupper = mid;\n\n\t\t}\n\n\t}\n\n\treturn lower;\n\n}\n\nfunction colorToLuminance( r, g, b ) {\n\n\t// https://en.wikipedia.org/wiki/Relative_luminance\n\treturn 0.2126 * r + 0.7152 * g + 0.0722 * b;\n\n}\n\n// ensures the data is all floating point values and flipY is false\nfunction preprocessEnvMap( envMap ) {\n\n\tconst map = envMap.clone();\n\tmap.source = new Source( { ...map.image } );\n\tconst { width, height, data } = map.image;\n\n\t// TODO: is there a simple way to avoid cloning and adjusting the env map data here?\n\t// convert the data from half float uint 16 arrays to float arrays for cdf computation\n\tlet newData = data;\n\tif ( map.type === HalfFloatType ) {\n\n\t\tnewData = new Float32Array( data.length );\n\t\tfor ( const i in data ) {\n\n\t\t\tnewData[ i ] = DataUtils.fromHalfFloat( data[ i ] );\n\n\t\t}\n\n\t\tmap.image.data = newData;\n\t\tmap.type = FloatType;\n\n\t}\n\n\t// remove any y flipping for cdf computation\n\tif ( map.flipY ) {\n\n\t\tconst ogData = newData;\n\t\tnewData = newData.slice();\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst newY = height - y - 1;\n\t\t\t\tconst ogIndex = 4 * ( y * width + x );\n\t\t\t\tconst newIndex = 4 * ( newY * width + x );\n\n\t\t\t\tnewData[ newIndex + 0 ] = ogData[ ogIndex + 0 ];\n\t\t\t\tnewData[ newIndex + 1 ] = ogData[ ogIndex + 1 ];\n\t\t\t\tnewData[ newIndex + 2 ] = ogData[ ogIndex + 2 ];\n\t\t\t\tnewData[ newIndex + 3 ] = ogData[ ogIndex + 3 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tmap.flipY = false;\n\t\tmap.image.data = newData;\n\n\t}\n\n\treturn map;\n\n}\n\nexport class EquirectHdrInfoUniform {\n\n\tconstructor() {\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance row & pdf\n\t\t// used to sampling a random value to a relevant row to sample from\n\t\tconst marginalWeights = new DataTexture();\n\t\tmarginalWeights.type = FloatType;\n\t\tmarginalWeights.format = RedFormat;\n\t\tmarginalWeights.minFilter = LinearFilter;\n\t\tmarginalWeights.magFilter = LinearFilter;\n\t\tmarginalWeights.generateMipmaps = false;\n\n\t\t// Stores a map of [0, 1] value -> cumulative importance column & pdf\n\t\t// used to sampling a random value to a relevant pixel to sample from\n\t\tconst conditionalWeights = new DataTexture();\n\t\tconditionalWeights.type = FloatType;\n\t\tconditionalWeights.format = RedFormat;\n\t\tconditionalWeights.minFilter = LinearFilter;\n\t\tconditionalWeights.magFilter = LinearFilter;\n\t\tconditionalWeights.generateMipmaps = false;\n\n\t\t// store the total sum in a 1x1 tex since some android mobile devices have issues\n\t\t// storing large values in structs.\n\t\tconst totalSumTex = new DataTexture();\n\t\ttotalSumTex.type = FloatType;\n\t\ttotalSumTex.format = RedFormat;\n\t\ttotalSumTex.minFilter = LinearFilter;\n\t\ttotalSumTex.magFilter = LinearFilter;\n\t\ttotalSumTex.generateMipmaps = false;\n\n\t\tthis.marginalWeights = marginalWeights;\n\t\tthis.conditionalWeights = conditionalWeights;\n\t\tthis.totalSum = totalSumTex;\n\t\tthis.map = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.marginalWeights.dispose();\n\t\tthis.conditionalWeights.dispose();\n\t\tthis.totalSum.dispose();\n\t\tif ( this.map ) this.map.dispose();\n\n\t}\n\n\tupdateFrom( hdr ) {\n\n\t\t// https://github.com/knightcrawler25/GLSL-PathTracer/blob/3c6fd9b6b3da47cd50c527eeb45845eef06c55c3/src/loaders/hdrloader.cpp\n\t\t// https://pbr-book.org/3ed-2018/Light_Transport_I_Surface_Reflection/Sampling_Light_Sources#InfiniteAreaLights\n\t\tconst map = preprocessEnvMap( hdr );\n\t\tmap.wrapS = RepeatWrapping;\n\t\tmap.wrapT = RepeatWrapping;\n\n\t\tconst { width, height, data } = map.image;\n\n\t\t// \"conditional\" = \"pixel relative to row pixels sum\"\n\t\t// \"marginal\" = \"row relative to row sum\"\n\n\t\t// track the importance of any given pixel in the image by tracking its weight relative to other pixels in the image\n\t\tconst pdfConditional = new Float32Array( width * height );\n\t\tconst cdfConditional = new Float32Array( width * height );\n\n\t\tconst pdfMarginal = new Float32Array( height );\n\t\tconst cdfMarginal = new Float32Array( height );\n\n\t\tlet totalSumValue = 0.0;\n\t\tlet cumulativeWeightMarginal = 0.0;\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tlet cumulativeRowWeight = 0.0;\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst r = data[ 4 * i + 0 ];\n\t\t\t\tconst g = data[ 4 * i + 1 ];\n\t\t\t\tconst b = data[ 4 * i + 2 ];\n\n\t\t\t\t// the probability of the pixel being selected in this row is the\n\t\t\t\t// scale of the luminance relative to the rest of the pixels.\n\t\t\t\t// TODO: this should also account for the solid angle of the pixel when sampling\n\t\t\t\tconst weight = colorToLuminance( r, g, b );\n\t\t\t\tcumulativeRowWeight += weight;\n\t\t\t\ttotalSumValue += weight;\n\n\t\t\t\tpdfConditional[ i ] = weight;\n\t\t\t\tcdfConditional[ i ] = cumulativeRowWeight;\n\n\t\t\t}\n\n\t\t\t// can happen if the row is all black\n\t\t\tif ( cumulativeRowWeight !== 0 ) {\n\n\t\t\t\t// scale the pdf and cdf to [0.0, 1.0]\n\t\t\t\tfor ( let i = y * width, l = y * width + width; i < l; i ++ ) {\n\n\t\t\t\t\tpdfConditional[ i ] /= cumulativeRowWeight;\n\t\t\t\t\tcdfConditional[ i ] /= cumulativeRowWeight;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tcumulativeWeightMarginal += cumulativeRowWeight;\n\n\t\t\t// compute the marginal pdf and cdf along the height of the map.\n\t\t\tpdfMarginal[ y ] = cumulativeRowWeight;\n\t\t\tcdfMarginal[ y ] = cumulativeWeightMarginal;\n\n\t\t}\n\n\t\t// can happen if the texture is all black\n\t\tif ( cumulativeWeightMarginal !== 0 ) {\n\n\t\t\t// scale the marginal pdf and cdf to [0.0, 1.0]\n\t\t\tfor ( let i = 0, l = pdfMarginal.length; i < l; i ++ ) {\n\n\t\t\t\tpdfMarginal[ i ] /= cumulativeWeightMarginal;\n\t\t\t\tcdfMarginal[ i ] /= cumulativeWeightMarginal;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute a sorted index of distributions and the probabilities along them for both\n\t\t// the marginal and conditional data. These will be used to sample with a random number\n\t\t// to retrieve a uv value to sample in the environment map.\n\t\t// These values continually increase so it's okay to interpolate between them.\n\t\tconst marginalDataArray = new Float32Array( height );\n\t\tconst conditionalDataArray = new Float32Array( width * height );\n\n\t\tfor ( let i = 0; i < height; i ++ ) {\n\n\t\t\tconst dist = ( i + 1 ) / height;\n\t\t\tconst row = binarySearchFindClosestIndexOf( cdfMarginal, dist );\n\n\t\t\tmarginalDataArray[ i ] = row / height;\n\n\t\t}\n\n\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst dist = ( x + 1 ) / width;\n\t\t\t\tconst col = binarySearchFindClosestIndexOf( cdfConditional, dist, y * width, width );\n\n\t\t\t\tconditionalDataArray[ i ] = col / width;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispose();\n\n\t\tconst { marginalWeights, conditionalWeights, totalSum } = this;\n\t\tmarginalWeights.image = { width: height, height: 1, data: marginalDataArray };\n\t\tmarginalWeights.needsUpdate = true;\n\n\t\tconditionalWeights.image = { width, height, data: conditionalDataArray };\n\t\tconditionalWeights.needsUpdate = true;\n\n\t\ttotalSum.image = { width: 1, height: 1, data: new Float32Array( [ totalSumValue ] ) };\n\t\ttotalSum.needsUpdate = true;\n\n\t\tthis.map = map;\n\n\t}\n\n}\n","import {\n\tDataTextureLoader,\n\tDataUtils,\n\tFloatType,\n\tHalfFloatType,\n\tLinearEncoding,\n\tLinearFilter\n} from 'three';\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.type = HalfFloatType;\n\n\t}\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse( buffer ) {\n\n\t\tconst\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( 'THREE.RGBELoader Read Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( 'THREE.RGBELoader Write Error: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( 'THREE.RGBELoader Bad File Format: ' + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( 'THREE.RGBELoader: Error: ' + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = '\\n',\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tconst chunkSize = 128;\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tlet p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '',\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\n\t\t\t\t// regexes to parse header info fields\n\t\t\t\tconst magic_token_re = /^#\\?(\\S+)/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tlet line, match;\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, 'no header found' );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad initial token' );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + '\\n';\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + '\\n';\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing format specifier' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'missing image size specifier' );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tconst scanline_width = w;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'wrong scanline width' );\n\n\t\t\t\t}\n\n\t\t\t\tconst data_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, 'unable to allocate buffer space' );\n\n\t\t\t\t}\n\n\t\t\t\tlet offset = 0, pos = 0;\n\n\t\t\t\tconst ptr_end = 4 * scanline_width;\n\t\t\t\tconst rgbeStart = new Uint8Array( 4 );\n\t\t\t\tconst scanline_buffer = new Uint8Array( ptr_end );\n\t\t\t\tlet num_scanlines = h;\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad rgbe scanline format' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tlet ptr = 0, count;\n\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tconst isEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, 'bad scanline data' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tconst byteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tconst l = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( let i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\tlet off = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tconst RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\t\t\tdestArray[ destOffset + 3 ] = 1;\n\n\t\t};\n\n\t\tconst RGBEByteToRGBHalf = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tconst e = sourceArray[ sourceOffset + 3 ];\n\t\t\tconst scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t// clamping to 65504, the maximum representable value in float16\n\t\t\tdestArray[ destOffset + 0 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 0 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 1 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 1 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 2 ] = DataUtils.toHalfFloat( Math.min( sourceArray[ sourceOffset + 2 ] * scale, 65504 ) );\n\t\t\tdestArray[ destOffset + 3 ] = DataUtils.toHalfFloat( 1 );\n\n\t\t};\n\n\t\tconst byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tconst rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tconst w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tlet data, format, type;\n\t\t\t\tlet numElements;\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst floatArray = new Float32Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = floatArray;\n\t\t\t\t\t\ttype = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tnumElements = image_rgba_data.length / 4;\n\t\t\t\t\t\tconst halfArray = new Uint16Array( numElements * 4 );\n\n\t\t\t\t\t\tfor ( let j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 4 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdata = halfArray;\n\t\t\t\t\t\ttype = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tsetDataType( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn super.load( url, onLoadCallback, onProgress, onError );\n\n\t}\n\n}\n\nexport { RGBELoader };\n"],"names":["parcelRequire","$ilwiq","$d0f249dd9f03ac59$var$renderTask","_renderer","_fsQuad","_blendQuad","_primaryTarget","_blendTargets","alpha","camera","material","this","blendMaterial","blendTarget1","blendTarget2","opacity","samples","blending","NoBlending","NormalBlending","w","width","h","height","resolution","set","seed","tx","tiles","x","ty","y","totalTiles","dprInv","getPixelRatio","cameraWorldMatrix","copy","matrixWorld","invProjectionMatrix","projectionMatrixInverse","isOrthographicCamera","projectionMatrix","elements","ogRenderTarget","getRenderTarget","ogAutoClear","autoClear","setRenderTarget","setScissorTest","setScissor","Math","ceil","render","target1","texture","target2","round","$d0f249dd9f03ac59$var$ogClearColor","Color","$d0f249dd9f03ac59$export$196da6cc71a4331","v","target","_alpha","dispose","reset","constructor","renderer","Vector2","stableNoise","$RPVlj","FullScreenQuad","$2JSgM","BlendMaterial","_task","WebGLRenderTarget","format","RGBAFormat","type","FloatType","setSize","ogClearAlpha","getClearAlpha","getClearColor","setClearColor","clearColor","update","call","next","$1fe9e194dadaa0ff$export$70ee8b3cbd6f21d8","$9fZ6X","MaterialBase","parameters","super","uniforms","value","vertexShader","fragmentShader","setValues","$fc1143d2ee906d9d$export$b42762e2bf679e84","initialized","Boolean","bvh","scene","geometry","BufferGeometry","materials","textures","staticGeometryGenerator","$8Zfx2","StaticGeometryGenerator","generate","attributes","traverse","c","isMesh","normalMapRequired","normalMap","$jM3IF","setCommonAttributes","textureSet","Set","getMaterials","forEach","key","isTexture","add","materialIndexAttribute","getGroupMaterialIndicesAttribute","setAttribute","clearGroups","MeshBVH","Array","from","refit","$465cbee6efe1dae1$var$isTypedArray","arr","buffer","ArrayBuffer","$465cbee6efe1dae1$export$c80603c061964928","ignoreKeys","shareTextures","areEqual","objectA","objectB","keySet","traverseSet","a","b","Object","has","Error","aIsElement","Element","bIsElement","Image","src","aIsImageBitmap","ImageBitmap","bIsImageBitmap","equals","aIsTypedArray","bIsTypedArray","length","i","l","clear","hasOwnProperty","Function","key1","keys","values","result","delete","process","object","replaced","processMaterial","foundMaterial","otherMaterial","push","image","foundTexture","isArray","retained","$911d375abf1afdea$export$baf85f88dacad6d5","PerspectiveCamera","bokehSize","size","fStop","getFocalLength","args","apertureBlades","apertureRotation","focusDistance","anamorphicRatio","$ac13547279de9cd0$var$PMREMCopyMaterial","envMap","blur","$jNhCl","shaderUtils","$ac13547279de9cd0$export$13ef63fd7e562136","pmremGenerator","PMREMGenerator","copyQuad","renderTarget","pmremTarget","fromEquirectangular","prevRenderTarget","prevClear","Float32Array","readRenderTargetPixels","DataTexture","minFilter","magFilter","wrapS","wrapT","mapping","EquirectangularReflectionMapping","needsUpdate","$6b5ea45f30e12757$export$746cbc9e65f5bcb8","onBeforeRender","setDefine","physicalCamera","transparent","depthWrite","defines","FEATURE_MIS","FEATURE_DOF","FEATURE_GRADIENT_BG","TRANSPARENT_TRAVERSALS","bounces","$iyhQ7","PhysicalCameraUniform","MeshBVHUniformStruct","normalAttribute","FloatVertexAttributeTexture","tangentAttribute","uvAttribute","UIntVertexAttributeTexture","$laA5G","MaterialsTexture","$12pjC","RenderTarget2DArray","Matrix4","backgroundBlur","environmentIntensity","environmentRotation","Matrix3","envMapInfo","$kAJM1","EquirectHdrInfoUniform","filterGlossyFactor","bgGradientTop","bgGradientBottom","backgroundAlpha","shaderStructs","shaderIntersectFunction","$5Wq6T","shaderMaterialStructs","$fcAdp","shaderMaterialSampling","$1RTaa","shaderEnvMapSampling","$f69686fae5159582$var$MATERIAL_STRIDE","$f69686fae5159582$var$MATERIAL_PIXELS","$f69686fae5159582$export$ae96f3619813ce17","ClampToEdgeWrapping","generateMipmaps","setCastShadow","materialIndex","cast","data","getCastShadow","array","setSide","side","index","FrontSide","BackSide","DoubleSide","getSide","setMatte","matte","getMatte","updateFrom","getTexture","def","indexOf","getField","writeTextureMatrixToArray","textureKey","offset","matrix","pixelCount","dimension","sqrt","floatArray","i1","m","color","r","g","metalnessMap","roughnessMap","emissive","normalScale","alphaTest","$0c199d70d276a61d$var$prevColor","$0c199d70d276a61d$export$dbbaa51cb2d0b2f7","WebGLArrayRenderTarget","args1","tex","UnsignedByteType","LinearFilter","RepeatWrapping","setTextures","fsQuad","MeshBasicMaterial","prevToneMapping","toneMapping","prevAlpha","depth","NoToneMapping","matrixAutoUpdate","identity","map","updateMatrix","$b114119888481524$export$aba3482f45fc2e55","shaderGGXFunctions","$8456ef8cb9b1d3a5$export$75d2a701aae03ef9","$15c587eb667da097$export$c4e96847515c3dca","$csrdQ","$d8193d8a8d6141d1$export$2e27c77dea3c9d73","PhysicalCamera","$efdaad16b8cd905b$var$binarySearchFindClosestIndexOf","targetValue","count","lower","upper","mid","$efdaad16b8cd905b$var$colorToLuminance","$efdaad16b8cd905b$export$e5a77e5d6a85a862","marginalWeights","RedFormat","conditionalWeights","totalSumTex","totalSum","hdr","clone","source","Source","newData","HalfFloatType","DataUtils","fromHalfFloat","flipY","ogData","slice","ogIndex","newIndex","$efdaad16b8cd905b$var$preprocessEnvMap","pdfConditional","cdfConditional","pdfMarginal","cdfMarginal","totalSumValue","cumulativeWeightMarginal","cumulativeRowWeight","weight","marginalDataArray","conditionalDataArray","row","y1","col","$5ee05658f4b0e3bf$export$d076a711b55c758a","DataTextureLoader","manager","parse","buffer1","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","byteLength","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","Uint8Array","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","gamma","exposure","line","match","charAt","parseFloat","parseInt","RGBE_ReadHeader","image_rgba_data","scanline_width","data_rgba","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","isEncodedRun","byteValue","off","RGBE_ReadPixels_RLE","numElements","j","halfArray","j1","setDataType","load","url","onLoad","onProgress","onError","texData","encoding","LinearEncoding"],"version":3,"file":"depthOfField.0b86a860.js.map"}